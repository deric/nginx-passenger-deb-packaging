#!/bin/bash
#
#   $ ./build_nginx
#
set -e
set -u

EXPECTED_ARGS=1
E_BADARGS=65

if [ $# -lt $EXPECTED_ARGS ]
then
  echo "Usage: `basename $0` {codename}"
  exit ${E_BADARGS};
fi

#use old debian init.d scripts or ubuntu upstart
dist="debian" #$1
CODENAME=$1
origdir="$(pwd)"

NGINX_VERSION="1.5.1"
NGINX_BASENAME="nginx-${NGINX_VERSION}"
NGINX_SOURCE="http://nginx.org/download/${NGINX_BASENAME}.tar.gz"

DEBIAN_ROOT="deb"
DEB_NAME=nginx-passenger
DEB_VERSION="a.`passenger-config --version`"
DEB_LICENSE="2-clause BSD-like license" #from nginx.org
DEB_DESCRIPTION="small, powerful, scalable web/proxy server Nginx (\"engine X\") is a high-performance web and reverse proxy server created by Igor Sysoev. It can be used both as a standalone web server and as a proxy to reduce the load on back-end HTTP or mail servers.
This package includes Passenger `passenger-config --version`"
DEB_URL="http://nginx.net"
DEB_ARCH=`dpkg-architecture -qDEB_BUILD_ARCH`
DEB_SECTION="httpd"

#TODO find other sudo case 'su'...
PATERN='rvmsudo is.*'
if [[ `type rvmsudo` =~ $PATERN ]]; then
 SUDO="rvmsudo"
else
 SUDO="sudo"
fi

CLEAN="false"
if [ $# -gt 1 ]; then
  if [ $2 == "clean" ]; then
        echo "got clear arg"
    CLEAN="true"
  fi
fi

# add e.g. to ~/.bash_profile 'export MAINTAINER="your@email.com"'
# if variable not set, use default value
if [[ -z ${MAINTAINER+xxx} && "${MAINTAINER+xxx}" = "xxx" ]]; then
  #variable is not set at all or it's empty
  MAINTAINER="${USER}@localhost"
fi


if [[ "${CODENAME}" == "squeeze" ]]; then
  LIBSSL="libssl0.9.8"
else
  #should work for wheezy
  LIBSSL="libssl1.0.0"
fi
LIBCURL="libcurl4-openssl-dev" #whichever libcurl you prefere
#LIBCURL="libcurl4-gnutls-dev"

#check dependencies
DEPENDENCIES=(autoconf automake wget make ${LIBCURL} zlib1g-dev libpcre3-dev)
i=0
expstatus="Status: install ok installed"
for package in ${DEPENDENCIES[@]}
do
   status=`dpkg -s ${package} | grep Status:`
   if [[ "${status}" != *"${expstatus}"* ]]; then
     echo "missing package: ${package}"
     i=$((i+1))
   fi
done
if [[ i -gt 0 ]]; then
  echo "please install missing dependencies"
  exit 1
fi
#TODO Could be DRYer
GEMS=(rake passenger fpm)
i=0
for gem in ${GEMS[@]}
do
   if [[ `gem list -i ${gem}` != 'true' ]]; then
       echo "missing gem: ${gem}"
     i=$((i+1))
   fi
done
if [[ i -gt 0 ]]; then
  echo "please install missing gem"
  exit 1
fi

#_ MAIN _#
echo "removing ${DEB_NAME}*.deb"
rm -rf ${DEB_NAME}*.deb
mkdir -p tmp && pushd tmp

if [ ! -d $NGINX_BASENAME ]; then
  wget $NGINX_SOURCE
  tar -xvzf "${NGINX_BASENAME}.tar.gz"
fi

if [[ -d $DEBIAN_ROOT ]]; then
  echo "removing old ${DEBIAN_ROOT} directory..."
  rm -rf $DEBIAN_ROOT
fi

mkdir $DEBIAN_ROOT
DEBIAN_ROOT=$(readlink -f $DEBIAN_ROOT)

pushd $NGINX_BASENAME

if [ ${CLEAN} == "true" ]; then
  echo "cleaning previous build"
  rm -rf build
  mkdir build
fi

#findout passenger path
PASSENGER_GEM_DIR=`passenger-config --root`
passenger_ext_path="${PASSENGER_GEM_DIR}/ext/nginx"

if [[ ! -d ${passenger_ext_path} ]]; then
  echo "the passenger gem does not seem to be correctly installed, check ${PASSENGER_GEM_DIR}"
fi

#nginx options
OPTS="--prefix=/etc/nginx \
--conf-path=/etc/nginx/nginx.conf \
--error-log-path=/var/log/nginx/error.log --pid-path=/var/run/nginx.pid \
--lock-path=/var/lock/nginx.lock \
--http-log-path=/var/log/nginx/access.log \
--with-http_dav_module \
--http-client-body-temp-path=/var/lib/nginx/body \
--http-proxy-temp-path=/var/lib/nginx/proxy \
--with-http_stub_status_module \
--sbin-path=/usr/sbin/nginx \
--with-http_ssl_module \
--with-http_gzip_static_module \
--with-ipv6 \
--http-uwsgi-temp-path=/var/lib/nginx/uwsgi \
--with-http_realip_module \
--with-debug \
--with-sha1=/usr/include/openssl \
--with-md5=/usr/include/openssl \
--add-module=${passenger_ext_path}"

#for GeoIp module: --with-http_geoip_module

echo "nginx options: ${OPTS}"
${SUDO} ./configure ${OPTS}
#if sudo is used, objects are owned by root
${SUDO} chown -R ${USER} .
make
make install DESTDIR=$DEBIAN_ROOT
popd #$NGINX_BASENAME

# preserve executable flag
cp -Rp ../debian/template/. $DEBIAN_ROOT

#_ MAKE DEBIAN _#
pushd $DEBIAN_ROOT
echo "entering package root `pwd`"
echo "building deb package ..."

#TODO lintian tell us to mark all config files
#    --config-files "${origdir}/debian/nginx-passenger.postrm" \
# --replaces or --conflicts ruby-passenger libapache2-mod-passenger

fpm -t deb \
    -n ${DEB_NAME} \
    -v "${NGINX_VERSION}~${CODENAME}${DEB_VERSION}" \
    --description "${DEB_DESCRIPTION}" \
    --url="${DEB_URL}" \
    -a ${DEB_ARCH} \
    --license "${DEB_LICENSE}" \
    --category ${DEB_SECTION} \
    --vendor "" \
    --replaces "nginx-full" --replaces "nginx-light" --replaces "nginx-naxsi" \
    --replaces "nginx-common" \
    -d "libc6" -d "libpcre3" -d "zlib1g" -d "${LIBSSL}" \
    --before-remove "${origdir}/debian/nginx-passenger.prerm" \
    --after-remove "${origdir}/debian/nginx-passenger.postrm" \
    --after-install "${origdir}/debian/nginx-passenger.postinst" \
    -m "$MAINTAINER" \
    --prefix=/ \
    -s dir \
    -- .
mv ${DEB_NAME}*.deb ${origdir}
popd #$DEBIAN_ROOT

popd #tmp
exit 1;
